#!/bin/bash
rm -f *.log

function make()
{
    title "make $*"
    /bin/make $*
    sleep 5
}

trap '{ stty sane; echo ""; errexit "Aborted"; }' SIGINT SIGTERM
#source /home/dwade/Scripts/common/bash_backtrace.sh

#SOURCE_URL='https://github.com/raspberrypi/linux'
SOURCE_URL='https://github.com/donwade/raspi-linux.git'


CONFIG1="Raspberry Pi 1, Zero and Zero W, and Raspberry Pi Compute Module 1 (32-bit) [kernel.img]"
CONFIG2="Raspberry Pi 2, 3, 3+ and Zero 2 W, and Raspberry Pi Compute Modules 3 and 3+ (32-bit) [kernel7.img]"
CONFIG3="Raspberry Pi 4 and 400, and Raspberry Pi Compute Module 4 (32-bit) [kernel7l.img]"
CONFIG4="Raspberry Pi 3, 3+, 4, 400 and Zero 2 W, and Raspberry Pi Compute Modules 3, 3+ and 4 (64-bit) [kernel8.img]"
CONFIG5="Raspberry Pi 5 (64-bit) [kernel_2712.img]"

errexit()
{
  echo ""
  echo "$1"
  echo ""

# do not delete source for incremental build sake! 
#  if [ "${SRCDIR}" != "" ]; then
#    rm -r "${SRCDIR}" &> /dev/null
#  fi


  if [ "${STAGING_DIR}" != "" ]; then
    rm -r "${STAGING_DIR}" &> /dev/null
  fi

  exit 1
}

instpkgs()
{
  local i
  local PKGS

  PKGS=("$@")
  for i in ${!PKGS[@]}; do
    dpkg -s "${PKGS[i]}" &> /dev/null

    if [ $? -eq 0 ]; then
      unset PKGS[i]
    fi

  done

  if [ ${#PKGS[@]} -ne 0 ]; then
    echo ""
    echo -n "Ok to install ${PKGS[@]} (y/n)? "
    while read -r -n 1 -s answer; do

      if [[ ${answer} = [yYnN] ]]; then
        echo "${answer}"

        if [[ ${answer} = [nN] ]]; then
          errexit "Aborted"
        fi

        break
      fi

    done
    echo ""
    apt-get -y update
    apt-get -y install "${PKGS[@]}"
  fi

}

dispyn()
{
  local PROMPT
  local VALUE

  PROMPT=$1
  VALUE=$2
  echo -n "${PROMPT}: "

  if [ "${VALUE}" = "TRUE" ]; then
    echo "yes"
  else
    echo "no"
  fi

}

usage()
{
  cat <<EOF

Usage: $0 [options] [output directory]
-b,--branch          Branch to use (commitid/current/default/rpi-M.N.y)
-c,--config          Configuration to build:
   1 = ${CONFIG1}
   2 = ${CONFIG2}
   3 = ${CONFIG3}
   4 = ${CONFIG4}
   5 = ${CONFIG5}
   --delete-before   Delete existing source files
   --delete-after    Purge source files upon completion
   --out-dir         ouput directory
-f,--freshen         Freshen existing source files
-h,--help            This usage description
-i,--interactive     Interactive shell before compile
-j,--jobs            Number of jobs to run
-k,--keep            Keep old kernel as .bak
   --menuconfig      Run menuconfig
-n,--noinitramfs     Disable running update-initramfs
-o,--oldbootmnt      Use old boot mount (/boot)
-r,--reboot          Reboot upon completion
-s,--suffix          Append modules suffix (suffix)
-u,--unattended      Unattended operation, defaults:
   Branch = current
   Config = ${CONFIG4}
   Delete = auto
   Freshen = no
   Interactive = no
   Jobs = 4
   Keep = no
   Menuconfig = no
   Noinitramfs = no
   Oldbootmnt = no
   Purge = no
   Reboot = no
   Suffix = none
   Xcompile = no
-x,--cross-compile   Cross-compile mode

EOF
}

olddtb()
{

  if [[ $(sed -n 's|^.*\s\+\(\S\+\)\.\S\+\.\S\+\s\+Kernel Configuration$|\1|p' .config) -lt 6 ||\
   ($(sed -n 's|^.*\s\+\(\S\+\)\.\S\+\.\S\+\s\+Kernel Configuration$|\1|p' .config) -eq 6 &&\
   $(sed -n 's|^.*\s\+\S\+\.\(\S\+\)\.\S\+\s\+Kernel Configuration$|\1|p' .config) -lt 5) ]]; then
    echo "TRUE"
  else
    echo "FALSE"
  fi

}

STAGING_DIR=""
SRCDIR="/home/dwade/raspi-linux"

#https://forums.raspberrypi.com/viewtopic.php?t=343387



#if [ $(id -u) -ne 0 ]; then
#  errexit "Must be run as root user: sudo $0"
#fi

#PGMNAME="$(basename $0)"
#for PID in $(pidof -x -o %PPID "${PGMNAME}"); do
#
#  if [ ${PID} -ne $$ ]; then
#    errexit "${PGMNAME} is already running"
#  fi
#
#done

CURDIR="$(pwd)"

#if [ "${SUDO_USER}" != "" ]; then
#  REALUSER="${SUDO_USER}"
#else
  REALUSER="$(whoami)"
#fi

RASPI=FALSE

if [[ -e /proc/device-tree/model && "$(tr -d '\0' < /proc/device-tree/model)" =~ ^Raspberry\ Pi.*$ ]]; then
  RASPI=TRUE
fi

ARCH_K="$(uname -m)"
ARCH_U="$(dpkg --print-architecture)"
ZIP_OUTDIR=""
TARGET_BRANCH_=""
CONFIG=""
DELETE_BEFORE=FALSE
FRESHEN=FALSE
INTERACTIVE=FALSE
JOBS=""
KEEP=FALSE
MNUCFG=FALSE
NOINITRAMFS=FALSE
OLDBOOT=FALSE
DELETE_AFTER=FALSE
REBOOT=FALSE
SUFFIX=""
UNATND=FALSE
XCOMPILE=FALSE

while [ $# -gt 0 ]; do
  case "$1" in

    -b|--branch)
      TARGET_BRANCH="$2"
      shift 2
      ;;

    -c|--config)
      CONFIG="$2"
      shift 2
      ;;

    --delete-before)
      DELETE_BEFORE=TRUE
      shift
      ;;

    -f|--freshen)
      FRESHEN=TRUE
      shift
      ;;

    -h|--help)
      usage
      exit
      ;;

    -i|--interactive)
      INTERACTIVE=TRUE
      shift
      ;;

    --out-dir)
      ZIP_OUTDIR="$2"
      shift 2
    ;;

    -j|--jobs)
      JOBS="$2"
      shift 2
      ;;

    -k|--keep)
      KEEP=TRUE
      shift
      ;;

    --menuconfig)
      MNUCFG=TRUE
      shift
      ;;

    -n|--noinitramfs)
      NOINITRAMFS=TRUE
      shift
      ;;

    -o|--oldbootmnt)
      OLDBOOT=TRUE
      shift
      ;;

    --delete-after)
      DELETE_AFTER=TRUE
      shift
      ;;

    -r|--reboot)
      REBOOT=TRUE
      shift
      ;;

    -s|--suffix)
      SUFFIX="$2"
      shift 2
      ;;

    -u|--unattended)
      UNATND=TRUE
      shift
      ;;

    -x|--cross-compile)
      XCOMPILE=TRUE
      shift
      ;;

    *)
      errexit "Unrecognized option  $1"
      ;;

  esac
done

if [[ "${UNATND}" = "FALSE" && "${XCOMPILE}" = "FALSE" ]]; then
  echo ""
  echo -n "Cross-compile mode (y/n)? "
  while read -r -n 1 -s answer; do

    if [[ ${answer} = [yYnN] ]]; then
      echo "${answer}"

      if [[ ${answer} = [yY] ]]; then
        XCOMPILE=TRUE
      fi

      break
    fi

  done
fi


if [[ "${XCOMPILE}" = "FALSE" && "${RASPI}" = "FALSE" ]]; then
    errexit "Local builds require a Raspberry Pi"
fi


if [[ "${UNATND}" = "FALSE" && "${CONFIG}" = "" ]]; then
  echo ""
  echo -e -n "\
1) ${CONFIG1}\n\
2) ${CONFIG2}\n\
3) ${CONFIG3}\n\
4) ${CONFIG4}\n\
5) ${CONFIG5}\n\
Configuration: "
  while read -r -n 1 -s answer; do

    if [[ ${answer} = [12345] ]]; then
      echo "${answer}"
      CONFIG="${answer}"
      break
    fi

  done
fi


if [ "${CONFIG}" = "" ]; then
  CONFIG=4
fi

case "${CONFIG}" in

  1)

    if [ "${XCOMPILE}" = "TRUE" ]; then
      MAKCFG="ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcmrpi_defconfig"
    else
      MAKCFG=bcmrpi_defconfig
    fi

    KRNLID="v6"
    OLDIMG="kernel.img"
    ;;

  2)

    if [ "${XCOMPILE}" = "TRUE" ]; then
      MAKCFG="ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcm2709_defconfig"
    else
      MAKCFG=bcm2709_defconfig
    fi

    KRNLID="v7"
    OLDIMG="kernel7.img"
    ;;

  3)

    if [ "${XCOMPILE}" = "TRUE" ]; then
      MAKCFG="ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcm2711_defconfig"
    else
      MAKCFG=bcm2711_defconfig
    fi

    KRNLID="v7l"
    OLDIMG="kernel7l.img"
    ;;

  4)

    if [ "${XCOMPILE}" = "TRUE" ]; then
      MAKCFG="ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bcm2711_defconfig"
    else
      MAKCFG=bcm2711_defconfig
    fi

    KRNLID="v8"
    OLDIMG="kernel8.img"
    ;;

  5)

    if [ "${XCOMPILE}" = "TRUE" ]; then
      MAKCFG="ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bcm2712_defconfig"
    else
      MAKCFG=bcm2712_defconfig
    fi

    KRNLID="2712"
    OLDIMG="kernel_2712.img"
    ;;

  *)
    errexit "Invalid configuration"
    ;;

esac

if [[ "${XCOMPILE}" = "FALSE" &&\
 ((("${KRNLID}" = "v8" || "${KRNLID}" = "2712") && "${ARCH_K}" != "aarch64") ||\
 (("${KRNLID}" != "v8" && "${KRNLID}" != "2712") && "${ARCH_K}" = "aarch64") ||\
 (("${KRNLID}" = "v8" || "${KRNLID}" = "2712") && "${ARCH_U}" != "arm64") ||\
 (("${KRNLID}" != "v8" && "${KRNLID}" != "2712") && "${ARCH_U}" = "arm64")) ]]; then
  errexit "Local builds require similar kernel and userland architectures: use cross-compile mode (-x,--cross-compile) instead"
fi

instpkgs bc bison flex git libc6-dev libncurses-dev libssl-dev make wget

if [ "${XCOMPILE}" = "TRUE" ]; then
  instpkgs crossbuild-essential-armhf crossbuild-essential-arm64
fi


if [[ "${TARGET_BRANCH}" = "current" && "${RASPI}" = "FALSE" ]]; then
  errexit "Building 'current' branch requires a Raspberry Pi"
fi

# does the target branch exist?
git ls-remote --symref $SOURCE_URL | tee /tmp/123

GOOD_TAG=0
while read LINE; do
    TAG="`echo $LINE | rev | cut -d'/' -f1 | rev`"
    [ "$TAG" != "$TARGET_BRANCH" ] || GOOD_TAG=1
done < /tmp/123

if [ $GOOD_TAG == 0 ]; then
  errexit "Branch '${TARGET_BRANCH}' does not exist"
fi


if [[ "${UNATND}" = "FALSE" && "${SUFFIX}" = "" ]]; then
  echo ""
  echo -n "Suffix (blank = none): "
  read -r SUFFIX
fi

YELLOW "SUFFIX coming in $SUFFIX"
SUFFIX="$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' <<< "${SUFFIX}")"
SUFFIX="$(tr [[:blank:]] _ <<< "${SUFFIX}")"
YELLOW "SUFFIX going out $SUFFIX"
sleep 4


if [[ "${UNATND}" = "FALSE" && "${OLDBOOT}" = "FALSE" ]]; then
  echo ""
  echo -n "Use old boot mount (/boot) (y/n)? "
  while read -r -n 1 -s answer; do

    if [[ ${answer} = [yYnN] ]]; then
      echo "${answer}"

      if [[ ${answer} = [yY] ]]; then
        OLDBOOT=TRUE
      fi

      break
    fi

  done
fi


if [[ "${XCOMPILE}" = "FALSE" && "${UNATND}" = "FALSE" && "${OLDBOOT}" = "FALSE" && "${NOINITRAMFS}" = "FALSE" ]]; then
  echo ""
  echo -n "Disable running update-initramfs (y/n)? "
  while read -r -n 1 -s answer; do

    if [[ ${answer} = [yYnN] ]]; then
      echo "${answer}"

      if [[ ${answer} = [yY] ]]; then
        NOINITRAMFS=TRUE
      fi

      break
    fi

  done
fi


if [[ "${UNATND}" = "FALSE" && "${JOBS}" = "" ]]; then
  echo ""
  echo -n "Number of jobs (blank = 4): "
  read -r JOBS
fi

JOBS="$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' <<< "${JOBS}")"

if [ "${JOBS}" = "" ]; then
  JOBS=4
fi


if [[ (! "${JOBS}" =~ ^[[:digit:]]+$) || (${JOBS} -eq 0) ]]; then
  errexit "Invalid number of jobs"
fi


if [[ "${UNATND}" = "FALSE" && "${MNUCFG}" = "FALSE" ]]; then
  echo ""
  echo -n "Run menuconfig (y/n)? "
  while read -r -n 1 -s answer; do

    if [[ ${answer} = [yYnN] ]]; then
      echo "${answer}"

      if [[ ${answer} = [yY] ]]; then
        MNUCFG=TRUE
      fi

      break
    fi

  done
fi


if [[ "${UNATND}" = "FALSE" && "${INTERACTIVE}" = "FALSE" ]]; then
  echo ""
  echo -n "Interactive shell before compile (y/n)? "
  while read -r -n 1 -s answer; do

    if [[ ${answer} = [yYnN] ]]; then
      echo "${answer}"

      if [[ ${answer} = [yY] ]]; then
        INTERACTIVE=TRUE
      fi

      break
    fi

  done
fi


if [[ "${XCOMPILE}" = "FALSE" && "${UNATND}" = "FALSE" && "${OLDBOOT}" = "TRUE" && "${KEEP}" = "FALSE" ]]; then
  echo ""
  echo -n "Keep old kernel as .bak (y/n)? "
  while read -r -n 1 -s answer; do

    if [[ ${answer} = [yYnN] ]]; then
      echo "${answer}"

      if [[ ${answer} = [yY] ]]; then
        KEEP=TRUE
      fi

      break
    fi

  done
fi


if [[ "${UNATND}" = "FALSE" && "${DELETE_AFTER}" = "FALSE" ]]; then
  echo ""
  echo -n "Purge source files upon completion (y/n)? "
  while read -r -n 1 -s answer; do

    if [[ ${answer} = [yYnN] ]]; then
      echo "${answer}"

      if [[ ${answer} = [yY] ]]; then
        DELETE_AFTER=TRUE
      fi

      break
    fi

  done
fi


if [[ "${XCOMPILE}" = "FALSE" && "${UNATND}" = "FALSE" && "${REBOOT}" = "FALSE" ]]; then
  echo ""
  echo -n "Reboot upon completion (y/n)? "
  while read -r -n 1 -s answer; do

    if [[ ${answer} = [yYnN] ]]; then
      echo "${answer}"

      if [[ ${answer} = [yY] ]]; then
        REBOOT=TRUE
      fi

      break
    fi

  done
fi

echo ""
echo -n "Configuration: "
case "${CONFIG}" in

  1)
    echo "${CONFIG1}"
    ;;

  2)
    echo "${CONFIG2}"
    ;;

  3)
    echo "${CONFIG3}"
    ;;

  4)
    echo "${CONFIG4}"
    ;;

  5)
    echo "${CONFIG5}"
    ;;

esac
echo "$(dispyn "Cross-compile mode" "${XCOMPILE}")"
echo "Branch: ${TARGET_BRANCH}"
echo -n "Suffix: "

if [ "${SUFFIX}" = "" ]; then
  echo "none"
else
  echo "${SUFFIX}"
fi

echo "$(dispyn "Use old boot mount (/boot)" "${OLDBOOT}")"
echo "$(dispyn "Disable running update-initramfs" "${NOINITRAMFS}")"
echo "Jobs: ${JOBS}"
echo "$(dispyn "Run menuconfig" "${MNUCFG}")"
echo "$(dispyn "Interactive shell" "${INTERACTIVE}")"

if [[ "${XCOMPILE}" = "FALSE" && "${OLDBOOT}" = "TRUE" ]]; then
  echo "$(dispyn "Keep old kernel as .bak" "${KEEP}")"
fi

echo "$(dispyn "Purge source files upon completion" "${DELETE_AFTER}")"

if [ "${XCOMPILE}" = "FALSE" ]; then
  echo "$(dispyn "Reboot upon completion" "${REBOOT}")"
fi


if [ "${UNATND}" = "FALSE" ]; then
  echo ""
  echo -n "Build kernel (y/n)? "
  while read -r -n 1 -s answer; do

    if [[ ${answer} = [yYnN] ]]; then
      echo "${answer}"

      if [[ ${answer} = [nN] ]]; then
        errexit "Aborted"
      fi

      break
    fi

  done
fi


if [ -d $SRCDIR ]; then
  SOURCE="$(sed -n 's|^\[branch "\(.*\)"\]|\1|p' $SRCDIR/.git/config 2> /dev/null)"
  TARGET="${TARGET_BRANCH}"

  if [ "${TARGET}" = "default" ]; then
    TARGET="$(git ls-remote --symref $SOURCE_URL | head -n 1 | sed -n 's|^ref:\s\+refs/heads/\(.*\)\s\+HEAD$|\1|p')"
  fi

#  different branch? don't delete, try a checkout branch 
  if [ "${TARGET}" != "${SOURCE}" ]; then
    #DELETE_BEFORE=TRUE
    echo " **** git checkout will be attempted later"
  fi


  if [[ "${UNATND}" = "FALSE" && "${DELETE_BEFORE}" = "FALSE" ]]; then
    echo ""
    echo -n "Delete existing source files [Source/Target branch = ${SOURCE}] (y/n)? "
    while read -r -n 1 -s answer; do

      if [[ ${answer} = [yYnN] ]]; then
        echo "${answer}"

        if [[ ${answer} = [yY] ]]; then
          DELETE_BEFORE=TRUE
        fi

        break
      fi

    done
  fi


  if [ "${DELETE_BEFORE}" = "TRUE" ]; then
    echo ""
    ask "you are about to delete the source directory are you sure"
    [ $? != 0 ] || errorexit "stopping delete"
    rm -rf $SRCDIR
  fi

fi


if [ -d $SRCDIR ]; then
    cd $SRCDIR

    CURRENT_BRANCH="`git rev-parse --abbrev-ref HEAD`"

    if [[ "${TARGET_BRANCH}" != "${CURRENT_BRANCH}" ]]; then
             git checkout ${TARGET_BRANCH}
    fi
else
    echo "Downloading source files (this may take a while)"
    UP="`echo $SRCDIR | rev | cut -d'/' -f2- | rev`"
    cd $UP
    echo "git downloading into $SRCDIR"

    if [ "${TARGET_BRANCH}" = "default" ]; then
         git clone --quiet --depth=1 $SOURCE_URL $SRCDIR
    else
         git clone --quiet --depth=1 --branch "${TARGET_BRANCH}" $SOURCE_URL $SRCDIR
    fi
    set +x 
fi

cd $SRCDIR
echo ""


if [ ! -f .config ]; then
    RED "creating a base .config file "
    make ${MAKCFG}
else
    cp -av /home/dwade/pi-bakeshop/config.ref $SRCDIR/.config
    GREEN "using pre-exiting .config file"
    sleep 3
fi

if [ "${SUFFIX}" != "" ]; then
  BLINK_YELLOW ".config file 'CONFIG_LOCALVERSION overstruck with $SUFFIX"
  sed -i "s|^\(CONFIG_LOCALVERSION=\".*\)\"$|\1-${SUFFIX}\"|" .config
fi


if [ "${MNUCFG}" = "TRUE" ]; then

  if [ "${XCOMPILE}" = "TRUE" ]; then

    if [[ "${KRNLID}" = "v8" || "${KRNLID}" = "2712" ]]; then
      make -j${JOBS} ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- menuconfig
    else
      make -j${JOBS} ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig
    fi

    ask "save this config off shore" 
    if [ $? != 0 ]; then
        GREEN "saving .config file out of tree"
        cp .config /home/dwade/pi-bakeshop/config.ref
        sleep 2
    else
        YELLOW "not saving .config file"
    fi

  else
    GREEN "making virgin .config file"
    make menuconfig
  fi

fi

GREEN "--------- option differnces ------------"
mtmp=$(mktemp)
diff   .config /home/dwade/pi-bakeshop/config.virgin > $mtmp
while read LINE; do
    x="`echo $LINE | cut -c1-3`"
    if [ "$x" == '< C' ]; then
        GREEN "$LINE"
    elif [ "$x" == '> C' ]; then
        RED "$LINE"
    fi
done < $mtmp
GREEN "-------------------------------------------"

if [ "${INTERACTIVE}" = "TRUE" ]; then
  echo ""
  echo "Launching BASH shell"
  echo "Use exit or ^D to resume"
  echo ""
  /bin/bash -i
fi

echo ""
BUILD="$(sed -n 's|^.*\s\+\(\S\+\.\S\+\.\S\+\)\s\+Kernel Configuration$|\1|p' .config)-rpi999-rpi-${KRNLID}"

if [ "${XCOMPILE}" = "TRUE" ]; then
  STAGING_DIR="$(mktemp --directory --tmpdir build-kernel-dstdir-XXXXX)"

  if [ $? -ne 0 ]; then
    errexit "mktemp failed"
  fi

  if [[ "${KRNLID}" = "v8" || "${KRNLID}" = "2712" ]]; then
    if [ "${OLDBOOT}" = "FALSE" ]; then
      make -j ${JOBS} KERNELRELEASE="${BUILD}" ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- Image.gz
      [ $? == 0 ] || errexit "kernel build failed"

      ask "image done, skip drivrs/dtbs" 3
      [ $? == 0 ] || errexit "early exit requested"

      title "drivers/dtbs"
      echo "generating ..."
      make -j ${JOBS} KERNELRELEASE="${BUILD}" ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules dtbs
      [ $? == 0 ] || errexit "driver/dtb failed"

      ask "drivers/dtbs done, skip install" 3
      [ $? == 0 ] || errexit "early exit requested"
      title "install"
      env PATH=$PATH make KERNELRELEASE="${BUILD}" ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- INSTALL_MOD_PATH=${STAGING_DIR} modules_install > mod_inst.log

      mkdir -p "${STAGING_DIR}/boot/firmware/overlays/"
      mkdir -p "${STAGING_DIR}/lib/linux-image-${BUILD}/broadcom/"
      mkdir -p "${STAGING_DIR}/lib/linux-image-${BUILD}/overlays/"
      cp .config "${STAGING_DIR}/boot/config-${BUILD}"
      echo "ffffffffffffffff B The real System.map is in the linux-image-<version>-dbg package" > "${STAGING_DIR}/boot/System.map-${BUILD}"
      cp arch/arm64/boot/Image.gz "${STAGING_DIR}/boot/vmlinuz-${BUILD}"
      cp arch/arm64/boot/dts/broadcom/*.dtb "${STAGING_DIR}/lib/linux-image-${BUILD}/broadcom/"
      cp arch/arm64/boot/dts/overlays/*.dtb* "${STAGING_DIR}/lib/linux-image-${BUILD}/overlays/"
      cp arch/arm64/boot/dts/overlays/README "${STAGING_DIR}/lib/linux-image-${BUILD}/overlays/"
      cp arch/arm64/boot/Image.gz "${STAGING_DIR}/boot/firmware/${OLDIMG}"
      cp arch/arm64/boot/dts/broadcom/*.dtb "${STAGING_DIR}/boot/firmware/"
      cp arch/arm64/boot/dts/overlays/*.dtb* "${STAGING_DIR}/boot/firmware/overlays/"
      cp arch/arm64/boot/dts/overlays/README "${STAGING_DIR}/boot/firmware/overlays/"
    else
      make -j ${JOBS} ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- Image.gz 
      make -j ${JOBS} ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules dtbs
      env PATH=$PATH make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- INSTALL_MOD_PATH=${STAGING_DIR} modules_install

      mkdir -p "${STAGING_DIR}/boot/overlays/"
      cp arch/arm64/boot/Image.gz "${STAGING_DIR}/boot/${OLDIMG}"
      cp arch/arm64/boot/dts/broadcom/*.dtb "${STAGING_DIR}/boot/"
      cp arch/arm64/boot/dts/overlays/*.dtb* "${STAGING_DIR}/boot/overlays/"
      cp arch/arm64/boot/dts/overlays/README "${STAGING_DIR}/boot/overlays/"
    fi

  else

    if [ "${OLDBOOT}" = "FALSE" ]; then
      make -j ${JOBS} KERNELRELEASE="${BUILD}" ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs
      env PATH=$PATH make KERNELRELEASE="${BUILD}" ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=${STAGING_DIR} modules_install
      mkdir -p "${STAGING_DIR}/boot/firmware/overlays/"
      mkdir -p "${STAGING_DIR}/lib/linux-image-${BUILD}/overlays/"
      cp .config "${STAGING_DIR}/boot/config-${BUILD}"
      echo "ffffffffffffffff B The real System.map is in the linux-image-<version>-dbg package" > "${STAGING_DIR}/boot/System.map-${BUILD}"
      cp arch/arm/boot/zImage "${STAGING_DIR}/boot/vmlinuz-${BUILD}"
      cp arch/arm/boot/zImage "${STAGING_DIR}/boot/firmware/${OLDIMG}"

      if [ "$(olddtb)" = "TRUE" ]; then
        cp arch/arm/boot/dts/*.dtb "${STAGING_DIR}/lib/linux-image-${BUILD}/"
        cp arch/arm/boot/dts/*.dtb "${STAGING_DIR}/boot/firmware/"
      else
        cp arch/arm/boot/dts/broadcom/*.dtb "${STAGING_DIR}/lib/linux-image-${BUILD}/"
        cp arch/arm/boot/dts/broadcom/*.dtb "${STAGING_DIR}/boot/firmware/"
      fi

      cp arch/arm/boot/dts/overlays/*.dtb* "${STAGING_DIR}/lib/linux-image-${BUILD}/overlays/"
      cp arch/arm/boot/dts/overlays/README "${STAGING_DIR}/lib/linux-image-${BUILD}/overlays/"
      cp arch/arm/boot/dts/overlays/*.dtb* "${STAGING_DIR}/boot/firmware/overlays/"
      cp arch/arm/boot/dts/overlays/README "${STAGING_DIR}/boot/firmware/overlays/"
    else
      make -j ${JOBS} ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs
      env PATH=$PATH make  -j ${JOBS} ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=${STAGING_DIR} modules_install
      mkdir -p "${STAGING_DIR}/boot/overlays/"
      cp arch/arm/boot/zImage "${STAGING_DIR}/boot/${OLDIMG}"

      if [ "$(olddtb)" = "TRUE" ]; then
        cp arch/arm/boot/dts/*.dtb "${STAGING_DIR}/boot/"
      else
        cp arch/arm/boot/dts/broadcom/*.dtb "${STAGING_DIR}/boot/"
      fi

      cp arch/arm/boot/dts/overlays/*.dtb* "${STAGING_DIR}/boot/overlays/"
      cp arch/arm/boot/dts/overlays/README "${STAGING_DIR}/boot/overlays/"
    fi

  fi

  ARCHIVE="kernel-$(sed -n 's|^.*\s\+\(\S\+\.\S\+\.\S\+\)\s\+Kernel Configuration$|\1|p' .config)$(sed -n 's|^CONFIG_LOCALVERSION=\"\(.*\)\"$|\1|p' .config).zip"
  RED "ARCHIVE=$ARCHIVE"

  cd "${STAGING_DIR}"

  ls -al 
  find lib -type l -exec rm {} \;

  zip -q -r "${ARCHIVE}" *

  if [ "${ZIP_OUTDIR}" != "" ]; then

    if [ "${ZIP_OUTDIR: -1}" != "/" ]; then
      ZIP_OUTDIR+="/"
    fi

  else

    if [ "${REALUSER}" = "root" ]; then
      ZIP_OUTDIR="/root/"
    else
      ZIP_OUTDIR="/home/${REALUSER}/"
    fi

  fi

  chown "${REALUSER}:${REALUSER}" "${ARCHIVE}"
  cd "${CURDIR}"

  mv "${STAGING_DIR}/${ARCHIVE}" "${ZIP_OUTDIR}"
  rm -r "${STAGING_DIR}"
  STAGING_DIR=""
else

  if [[ "${KRNLID}" = "v8" || "${KRNLID}" = "2712" ]]; then

    if [ "${OLDBOOT}" = "FALSE" ]; then
      make -j ${JOBS} KERNELRELEASE="${BUILD}" Image.gz modules dtbs
      make KERNELRELEASE="${BUILD}" modules_install
      mkdir -p /boot/firmware/overlays/
      mkdir -p "/lib/linux-image-${BUILD}/broadcom/"
      mkdir -p "/lib/linux-image-${BUILD}/overlays/"
      cp .config "/boot/config-${BUILD}"
      echo "ffffffffffffffff B The real System.map is in the linux-image-<version>-dbg package" > "/boot/System.map-${BUILD}"
      cp arch/arm64/boot/Image.gz "/boot/vmlinuz-${BUILD}"
      cp arch/arm64/boot/dts/broadcom/*.dtb "/lib/linux-image-${BUILD}/broadcom/"
      cp arch/arm64/boot/dts/overlays/*.dtb* "/lib/linux-image-${BUILD}/overlays/"
      cp arch/arm64/boot/dts/overlays/README "/lib/linux-image-${BUILD}/overlays/"
      cp arch/arm64/boot/Image.gz "/boot/firmware/${OLDIMG}"
      cp arch/arm64/boot/dts/broadcom/*.dtb "/boot/firmware/"
      cp arch/arm64/boot/dts/overlays/*.dtb* "/boot/firmware/overlays/"
      cp arch/arm64/boot/dts/overlays/README "/boot/firmware/overlays/"

      if [ "${NOINITRAMFS}" = "FALSE" ]; then
        update-initramfs -c -v -k "${BUILD}"
      fi

    else
      make -j ${JOBS} Image.gz modules dtbs
      make modules_install

      if [ "${KEEP}" = "TRUE" ]; then
        mv "/boot/${OLDIMG}" "/boot/${OLDIMG}.bak"
      fi

      cp arch/arm64/boot/Image.gz "/boot/${OLDIMG}"
      cp arch/arm64/boot/dts/broadcom/*.dtb /boot/
      cp arch/arm64/boot/dts/overlays/*.dtb* /boot/overlays/
      cp arch/arm64/boot/dts/overlays/README /boot/overlays/
    fi

  else

    if [ "${OLDBOOT}" = "FALSE" ]; then
      make -j ${JOBS} KERNELRELEASE="${BUILD}" zImage modules dtbs
      make KERNELRELEASE="${BUILD}" modules_install
      mkdir -p /boot/firmware/overlays/
      mkdir -p "/lib/linux-image-${BUILD}/overlays/"
      cp .config "/boot/config-${BUILD}"

      echo "ffffffffffffffff B The real System.map is in the linux-image-<version>-dbg package" > "/boot/System.map-${BUILD}"
      cp arch/arm/boot/zImage "/boot/vmlinuz-${BUILD}"
      cp arch/arm/boot/zImage "/boot/firmware/${OLDIMG}"

      if [ "$(olddtb)" = "TRUE" ]; then
        cp arch/arm/boot/dts/*.dtb "/lib/linux-image-${BUILD}/"
        cp arch/arm/boot/dts/*.dtb "/boot/firmware/"
      else
        cp arch/arm/boot/dts/broadcom/*.dtb "/lib/linux-image-${BUILD}/"
        cp arch/arm/boot/dts/broadcom/*.dtb "/boot/firmware/"
      fi

      cp arch/arm/boot/dts/overlays/*.dtb* "/lib/linux-image-${BUILD}/overlays/"
      cp arch/arm/boot/dts/overlays/README "/lib/linux-image-${BUILD}/overlays/"
      cp arch/arm/boot/dts/overlays/*.dtb* "/boot/firmware/overlays/"
      cp arch/arm/boot/dts/overlays/README "/boot/firmware/overlays/"

      if [ "${NOINITRAMFS}" = "FALSE" ]; then
        update-initramfs -c -v -k "${BUILD}"
      fi

    else
      make -j ${JOBS} zImage modules dtbs
      make modules_install

      if [ "${KEEP}" = "TRUE" ]; then
        mv "/boot/${OLDIMG}" "/boot/${OLDIMG}.bak"
      fi

      cp arch/arm/boot/zImage "/boot/${OLDIMG}"

      if [ "$(olddtb)" = "TRUE" ]; then
        cp arch/arm/boot/dts/*.dtb /boot/
      else
        cp arch/arm/boot/dts/broadcom/*.dtb /boot/
      fi

      cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/
      cp arch/arm/boot/dts/overlays/README /boot/overlays/
    fi

  fi

fi

title ""
echo ""
echo "Kernel successfully built"

if [ "${DELETE_AFTER}" = "TRUE" ]; then
  echo ""
  echo "Purging source files"
  rm -r $SRCDIR
fi


if [ "${XCOMPILE}" = "FALSE" ]; then
  echo ""

  if [ "${REBOOT}" = "TRUE" ]; then
    echo "Rebooting"
    echo ""
    shutdown -r now
  else
    echo "Reboot required to use new kernel"

    if [ "${UNATND}" = "FALSE" ]; then
      echo ""
      echo -n "Reboot now (y/n)? "
      while read -r -n 1 -s answer; do

        if [[ ${answer} = [yYnN] ]]; then
          echo "${answer}"

          if [[ ${answer} = [yY] ]]; then
            shutdown -r now
          fi

          break
        fi

      done
    fi

  fi

fi

echo ""
